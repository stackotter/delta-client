// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: BlockModelPalette.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum ProtobufDirection: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case down // = 0
  case up // = 1
  case north // = 2
  case south // = 3
  case west // = 4
  case east // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .down
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .down
    case 1: self = .up
    case 2: self = .north
    case 3: self = .south
    case 4: self = .west
    case 5: self = .east
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .down: return 0
    case .up: return 1
    case .north: return 2
    case .south: return 3
    case .west: return 4
    case .east: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension ProtobufDirection: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [ProtobufDirection] = [
    .down,
    .up,
    .north,
    .south,
    .west,
    .east,
  ]
}

#endif  // swift(>=4.2)

public enum ProtobufTextureType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case opaque // = 0
  case transparent // = 1
  case translucent // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .opaque
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .opaque
    case 1: self = .transparent
    case 2: self = .translucent
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .opaque: return 0
    case .transparent: return 1
    case .translucent: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension ProtobufTextureType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [ProtobufTextureType] = [
    .opaque,
    .transparent,
    .translucent,
  ]
}

#endif  // swift(>=4.2)

public struct ProtobufBlockModelFace {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var direction: ProtobufDirection = .down

  public var actualDirection: ProtobufDirection = .down

  public var uvs: [Float] = []

  public var texture: Int32 = 0

  public var cullface: ProtobufDirection {
    get {return _cullface ?? .down}
    set {_cullface = newValue}
  }
  /// Returns true if `cullface` has been explicitly set.
  public var hasCullface: Bool {return self._cullface != nil}
  /// Clears the value of `cullface`. Subsequent reads from it will return its default value.
  public mutating func clearCullface() {self._cullface = nil}

  public var isTinted: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _cullface: ProtobufDirection? = nil
}

public struct ProtobufBlockModelElement {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var transformation: Data = Data()

  public var shade: Bool = false

  public var faces: [ProtobufBlockModelFace] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct ProtobufBlockModelPart {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var ambientOcclusion: Bool = false

  public var displayTransformsIndex: Int32 {
    get {return _displayTransformsIndex ?? 0}
    set {_displayTransformsIndex = newValue}
  }
  /// Returns true if `displayTransformsIndex` has been explicitly set.
  public var hasDisplayTransformsIndex: Bool {return self._displayTransformsIndex != nil}
  /// Clears the value of `displayTransformsIndex`. Subsequent reads from it will return its default value.
  public mutating func clearDisplayTransformsIndex() {self._displayTransformsIndex = nil}

  public var elements: [ProtobufBlockModelElement] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _displayTransformsIndex: Int32? = nil
}

public struct ProtobufBlockModel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var parts: [ProtobufBlockModelPart] = []

  public var cullingFaces: Int32 = 0

  public var cullableFaces: Int32 = 0

  public var nonCullableFaces: Int32 = 0

  public var textureType: ProtobufTextureType = .opaque

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct ProtobufVariants {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var variants: [ProtobufBlockModel] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct ProtobufDisplayTransforms {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var thirdPersonRightHand: Data = Data()

  public var thirdPersonLeftHand: Data = Data()

  public var firstPersonRightHand: Data = Data()

  public var firstPersonLeftHand: Data = Data()

  public var gui: Data = Data()

  public var head: Data = Data()

  public var ground: Data = Data()

  public var fixed: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct ProtobufBlockModelPalette {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var models: [ProtobufVariants] = []

  public var displayTransforms: [ProtobufDisplayTransforms] = []

  public var fullyOpaqueBlocks: [Bool] = []

  public var identifierToIndex: Dictionary<String,Int32> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension ProtobufDirection: @unchecked Sendable {}
extension ProtobufTextureType: @unchecked Sendable {}
extension ProtobufBlockModelFace: @unchecked Sendable {}
extension ProtobufBlockModelElement: @unchecked Sendable {}
extension ProtobufBlockModelPart: @unchecked Sendable {}
extension ProtobufBlockModel: @unchecked Sendable {}
extension ProtobufVariants: @unchecked Sendable {}
extension ProtobufDisplayTransforms: @unchecked Sendable {}
extension ProtobufBlockModelPalette: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension ProtobufDirection: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DOWN"),
    1: .same(proto: "UP"),
    2: .same(proto: "NORTH"),
    3: .same(proto: "SOUTH"),
    4: .same(proto: "WEST"),
    5: .same(proto: "EAST"),
  ]
}

extension ProtobufTextureType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OPAQUE"),
    1: .same(proto: "TRANSPARENT"),
    2: .same(proto: "TRANSLUCENT"),
  ]
}

extension ProtobufBlockModelFace: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ProtobufBlockModelFace"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "direction"),
    2: .standard(proto: "actual_direction"),
    3: .same(proto: "uvs"),
    4: .same(proto: "texture"),
    5: .same(proto: "cullface"),
    6: .standard(proto: "is_tinted"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.direction) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.actualDirection) }()
      case 3: try { try decoder.decodeRepeatedFloatField(value: &self.uvs) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.texture) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self._cullface) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.isTinted) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.direction != .down {
      try visitor.visitSingularEnumField(value: self.direction, fieldNumber: 1)
    }
    if self.actualDirection != .down {
      try visitor.visitSingularEnumField(value: self.actualDirection, fieldNumber: 2)
    }
    if !self.uvs.isEmpty {
      try visitor.visitPackedFloatField(value: self.uvs, fieldNumber: 3)
    }
    if self.texture != 0 {
      try visitor.visitSingularInt32Field(value: self.texture, fieldNumber: 4)
    }
    try { if let v = self._cullface {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
    } }()
    if self.isTinted != false {
      try visitor.visitSingularBoolField(value: self.isTinted, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ProtobufBlockModelFace, rhs: ProtobufBlockModelFace) -> Bool {
    if lhs.direction != rhs.direction {return false}
    if lhs.actualDirection != rhs.actualDirection {return false}
    if lhs.uvs != rhs.uvs {return false}
    if lhs.texture != rhs.texture {return false}
    if lhs._cullface != rhs._cullface {return false}
    if lhs.isTinted != rhs.isTinted {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufBlockModelElement: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ProtobufBlockModelElement"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "transformation"),
    2: .same(proto: "shade"),
    3: .same(proto: "faces"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.transformation) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.shade) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.faces) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.transformation.isEmpty {
      try visitor.visitSingularBytesField(value: self.transformation, fieldNumber: 1)
    }
    if self.shade != false {
      try visitor.visitSingularBoolField(value: self.shade, fieldNumber: 2)
    }
    if !self.faces.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.faces, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ProtobufBlockModelElement, rhs: ProtobufBlockModelElement) -> Bool {
    if lhs.transformation != rhs.transformation {return false}
    if lhs.shade != rhs.shade {return false}
    if lhs.faces != rhs.faces {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufBlockModelPart: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ProtobufBlockModelPart"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ambient_occlusion"),
    2: .standard(proto: "display_transforms_index"),
    3: .same(proto: "elements"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.ambientOcclusion) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._displayTransformsIndex) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.elements) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.ambientOcclusion != false {
      try visitor.visitSingularBoolField(value: self.ambientOcclusion, fieldNumber: 1)
    }
    try { if let v = self._displayTransformsIndex {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    if !self.elements.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.elements, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ProtobufBlockModelPart, rhs: ProtobufBlockModelPart) -> Bool {
    if lhs.ambientOcclusion != rhs.ambientOcclusion {return false}
    if lhs._displayTransformsIndex != rhs._displayTransformsIndex {return false}
    if lhs.elements != rhs.elements {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufBlockModel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ProtobufBlockModel"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parts"),
    2: .standard(proto: "culling_faces"),
    3: .standard(proto: "cullable_faces"),
    4: .standard(proto: "non_cullable_faces"),
    5: .standard(proto: "texture_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.parts) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.cullingFaces) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.cullableFaces) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.nonCullableFaces) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.textureType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.parts, fieldNumber: 1)
    }
    if self.cullingFaces != 0 {
      try visitor.visitSingularInt32Field(value: self.cullingFaces, fieldNumber: 2)
    }
    if self.cullableFaces != 0 {
      try visitor.visitSingularInt32Field(value: self.cullableFaces, fieldNumber: 3)
    }
    if self.nonCullableFaces != 0 {
      try visitor.visitSingularInt32Field(value: self.nonCullableFaces, fieldNumber: 4)
    }
    if self.textureType != .opaque {
      try visitor.visitSingularEnumField(value: self.textureType, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ProtobufBlockModel, rhs: ProtobufBlockModel) -> Bool {
    if lhs.parts != rhs.parts {return false}
    if lhs.cullingFaces != rhs.cullingFaces {return false}
    if lhs.cullableFaces != rhs.cullableFaces {return false}
    if lhs.nonCullableFaces != rhs.nonCullableFaces {return false}
    if lhs.textureType != rhs.textureType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufVariants: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ProtobufVariants"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "variants"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.variants) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.variants.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.variants, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ProtobufVariants, rhs: ProtobufVariants) -> Bool {
    if lhs.variants != rhs.variants {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufDisplayTransforms: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ProtobufDisplayTransforms"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "third_person_right_hand"),
    2: .standard(proto: "third_person_left_hand"),
    3: .standard(proto: "first_person_right_hand"),
    4: .standard(proto: "first_person_left_hand"),
    5: .same(proto: "gui"),
    6: .same(proto: "head"),
    7: .same(proto: "ground"),
    8: .same(proto: "fixed"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.thirdPersonRightHand) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.thirdPersonLeftHand) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.firstPersonRightHand) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.firstPersonLeftHand) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.gui) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.head) }()
      case 7: try { try decoder.decodeSingularBytesField(value: &self.ground) }()
      case 8: try { try decoder.decodeSingularBytesField(value: &self.fixed) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.thirdPersonRightHand.isEmpty {
      try visitor.visitSingularBytesField(value: self.thirdPersonRightHand, fieldNumber: 1)
    }
    if !self.thirdPersonLeftHand.isEmpty {
      try visitor.visitSingularBytesField(value: self.thirdPersonLeftHand, fieldNumber: 2)
    }
    if !self.firstPersonRightHand.isEmpty {
      try visitor.visitSingularBytesField(value: self.firstPersonRightHand, fieldNumber: 3)
    }
    if !self.firstPersonLeftHand.isEmpty {
      try visitor.visitSingularBytesField(value: self.firstPersonLeftHand, fieldNumber: 4)
    }
    if !self.gui.isEmpty {
      try visitor.visitSingularBytesField(value: self.gui, fieldNumber: 5)
    }
    if !self.head.isEmpty {
      try visitor.visitSingularBytesField(value: self.head, fieldNumber: 6)
    }
    if !self.ground.isEmpty {
      try visitor.visitSingularBytesField(value: self.ground, fieldNumber: 7)
    }
    if !self.fixed.isEmpty {
      try visitor.visitSingularBytesField(value: self.fixed, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ProtobufDisplayTransforms, rhs: ProtobufDisplayTransforms) -> Bool {
    if lhs.thirdPersonRightHand != rhs.thirdPersonRightHand {return false}
    if lhs.thirdPersonLeftHand != rhs.thirdPersonLeftHand {return false}
    if lhs.firstPersonRightHand != rhs.firstPersonRightHand {return false}
    if lhs.firstPersonLeftHand != rhs.firstPersonLeftHand {return false}
    if lhs.gui != rhs.gui {return false}
    if lhs.head != rhs.head {return false}
    if lhs.ground != rhs.ground {return false}
    if lhs.fixed != rhs.fixed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufBlockModelPalette: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ProtobufBlockModelPalette"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "models"),
    2: .standard(proto: "display_transforms"),
    3: .standard(proto: "fully_opaque_blocks"),
    4: .standard(proto: "identifier_to_index"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.models) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.displayTransforms) }()
      case 3: try { try decoder.decodeRepeatedBoolField(value: &self.fullyOpaqueBlocks) }()
      case 4: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufInt32>.self, value: &self.identifierToIndex) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.models.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.models, fieldNumber: 1)
    }
    if !self.displayTransforms.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.displayTransforms, fieldNumber: 2)
    }
    if !self.fullyOpaqueBlocks.isEmpty {
      try visitor.visitPackedBoolField(value: self.fullyOpaqueBlocks, fieldNumber: 3)
    }
    if !self.identifierToIndex.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufInt32>.self, value: self.identifierToIndex, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ProtobufBlockModelPalette, rhs: ProtobufBlockModelPalette) -> Bool {
    if lhs.models != rhs.models {return false}
    if lhs.displayTransforms != rhs.displayTransforms {return false}
    if lhs.fullyOpaqueBlocks != rhs.fullyOpaqueBlocks {return false}
    if lhs.identifierToIndex != rhs.identifierToIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
